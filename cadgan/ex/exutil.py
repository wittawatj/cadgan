"""
Utility functions for running experiments.
"""
import glob
import itertools as itt
import os
import random


def subsets_of_size(universe, k):
    """
    Return an iterator over all subsets of size k of the items in the list
    universe. Each call to the iterator returns a tuple of length k.
    """
    assert isinstance(universe, list)
    return itt.combinations(universe, k)


def subsets_of_sizes(universe, sizes):
    """
    Return an iterator over all subsets of size in the list sizes.
    Each call to the iterator returns a tuple.
    """
    iterators = [subsets_of_size(universe, s) for s in sizes]
    return itt.chain(*iterators)


def list_files_of_extensions(folder, extensions):
    """
    List files in the specified folder which have the specified extensions.
    Do not traverse subfolders.

    folder: string path to folder containing files
    extensions: only files with these extensions will be returned

    Return a list of paths to the files
    """
    # dir_no_slash = os.path.normpath(img_dir)
    list_patterns = [os.path.join(folder, "*" + ex) for ex in extensions]
    fnames = []

    for glob_pat in list_patterns:
        listed = glob.glob(glob_pat)
        fnames.extend(listed)

    return fnames


def subsets_of_files(folder, extensions, sizes, max_file=-1):
    """
    Return a iterator over tuples of files (file paths) in the folder which
    have the specified extensions. The tuples are generated by choosing all
    sets of size in [sizes].
    """
    list_files = list_files_of_extensions(folder, extensions)

    if max_file == -1 or max_file > len(list_files):
        max_file = len(list_files)

    return subsets_of_sizes(random.sample(list_files, max_file), sizes)


def write_filename_combinations(
    folder, extensions, sizes, dest_folder, fname_pattern="files_n{0}_{1}.txt", relative_to="", max_file=-1
):
    """
    1. Read all file names that satisfy the extensions.
    2. Generate tuples of files. Tuple size is in sizes.
    3. Write each tuple into one text file in dest_folder. fname_pattern
    specifies file naming pattern (as a string format).

    relative_to: File paths written are relative to this path.
    """
    if relative_to is None:
        relative_to = "."
    os.makedirs(dest_folder, exist_ok=True)
    size_counts = {}
    file_tuples = subsets_of_files(folder, extensions, sizes, max_file=max_file)

    for tup in file_tuples:
        l = len(tup)
        if l not in size_counts:
            size_counts[l] = 1
        # seq = next sequence number for set of size l
        seq = size_counts[l]
        size_counts[l] = seq + 1

        fname = fname_pattern.format(l, seq)
        fpath = os.path.join(dest_folder, fname)

        # write file
        with open(fpath, "w") as fdest:
            for l in tup:
                # resolve relative path
                rel_path = os.path.relpath(l, start=relative_to)
                fdest.write(rel_path + os.linesep)
